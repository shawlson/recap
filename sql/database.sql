begin;

create table if not exists sport (
    sport_id int generated by default as identity primary key,
    sport_name varchar(64) not null unique
);

create table if not exists league (
    league_code varchar(8) primary key,
    check (upper(league_code) = league_code),
    league_name varchar(128),
    sport_id int,
    foreign key(sport_id) references sport
);

create table if not exists season (
    season_id int generated by default as identity,
    league_code varchar(8),
    start_year int not null,
    season_type varchar(32) not null default 'Season',
    exhibition boolean not null default false,
    unique(season_id),
    unique(league_code, start_year, season_type),
    primary key(season_id, league_code),
    foreign key(league_code) references league
);

create table if not exists active_league_season (
    league_code varchar(8) primary key,
    season_id int,
    foreign key(league_code) references league,
    foreign key(season_id) references season(season_id)
);

create table if not exists club (
    club_id int generated by default as identity,
    club_iteration int not null default 1,
    represents varchar(128) not null,
    nickname varchar(128),
    primary key(club_id, club_iteration)
);

create table if not exists active_league_club (
    league_code varchar(8),
    club_id int,
    club_iteration int not null,
    primary key (league_code, club_id),
    foreign key(league_code) references league,
    foreign key(club_id, club_iteration) references club
    on update cascade
);

create table if not exists season_club (
    season_id int,
    league_code varchar(8),
    club_id int,
    club_iteration int not null,
    primary key(season_id, league_code, club_id),
    foreign key(season_id, league_code) references season,
    foreign key(club_id, club_iteration) references club
    on update cascade
);

create table if not exists game (
    game_id int generated by default as identity,
    league_code varchar(8),
    game_date date not null,
    title varchar(128),
    venue varchar(128),
    unique(game_id),
    primary key(game_id, league_code),
    foreign key(league_code) references league
);

create table if not exists game_season (
    game_id int,
    league_code varchar(8) not null,
    season_id int not null,
    primary key(game_id, league_code, season_id),
    foreign key(game_id, league_code) references game
    on delete cascade,
    foreign key(season_id, league_code) references season
);

create table if not exists game_club (
    game_id int,
    league_code varchar(8) not null,
    season_id int not null,
    club_id int,
    score int not null default 0 check (score >= 0),
    primary key(game_id, club_id),
    foreign key(game_id, league_code, season_id) references game_season
    on delete cascade,
    foreign key(season_id, league_code, club_id) references season_club
);

create table if not exists game_club_home (
    game_id int,
    club_id int not null,
    home boolean not null default true check (home = true),
    primary key(game_id),
    foreign key(game_id, club_id) references game_club
    on delete cascade
);

create table if not exists resource (
    resource_id int generated by default as identity primary key,
    game_id int not null,
    title varchar(128) not null,
    url varchar(256) not null,
    foreign key(game_id) references game(game_id)
    on delete cascade
);

create or replace
function new_game(league_code varchar(8), season_id int,
                  home_id int, home_score int,
                  away_id int, away_score int,
                  game_date date,
                  title varchar,
                  venue varchar)
returns int as $$
declare
    new_game_id int;
begin
    insert into game(league_code, game_date, title, venue)
    values(league_code, game_date, title, venue)
    returning game_id into new_game_id;

    insert into game_season(game_id, league_code, season_id)
    values(new_game_id, league_code, season_id);

    insert into game_club(game_id, league_code, season_id, club_id, score)
    values (new_game_id, league_code, season_id, home_id, home_score),
           (new_game_id, league_code, season_id, away_id, away_score);

    insert into game_club_home(game_id, club_id)
    values(new_game_id, home_id);

    return new_game_id;
end;
$$ language plpgsql;

create or replace view game_view as 
select
    sport.sport_name, league.league_code, league.league_name,
    season.season_id, season.start_year, season.season_type,
    season.exhibition,
    game.game_id, game.game_date, game.title, game.venue,
    "hc".club_id "home_id", hc.club_iteration "home_iteration",
    "hc".represents "home_represents", "hc".nickname "home_nickname",
    "home".score "home_score", "ac".club_id "away_id",
    "ac".club_iteration "away_iteration",
    "ac".represents "away_represents", "ac".nickname "away_nickname",
    "away".score "away_score"
from
    sport
    natural join league
    natural join season
    natural join game_season
    natural join game
    natural join game_club_home
    natural join game_club "home"
    join season_club "hsc"
        on "hsc".season_id = "home".season_id
        and "hsc".league_code = "home".league_code
        and "hsc".club_id = "home".club_id
    join club "hc"
        on "hc".club_id = "hsc".club_id
        and "hc".club_iteration = "hsc".club_iteration
    join game_club "away"
        on "away".game_id = game.game_id
        and "away".club_id != "home".club_id
    join season_club "asc"
        on "asc".season_id = "away".season_id
        and "asc".league_code = "away".league_code
        and "asc".club_id = "away".club_id
    join club "ac"
        on "ac".club_id = "asc".club_id
        and "ac".club_iteration = "asc".club_iteration;

create or replace view active_league_club_view as
select 
    club_id, club_iteration,
    represents, nickname,
    league_code, league_name
from league
natural join active_league_club
natural join club;

create or replace view season_club_view as
select 
    sport_name, league_code,
    league_name, season_id,
    start_year, season_type,
    exhibition, club_id,
    club_iteration,
    represents, nickname
from sport
natural join league
natural join season
natural join season_club
natural join club;

commit;
